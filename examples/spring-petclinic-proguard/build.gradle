import proguard.gradle.ProGuardTask

buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.3.2'
    }
}

plugins {
  id 'java'
  id 'org.springframework.boot' version '3.0.6'
  id 'io.spring.dependency-management' version '1.1.0'
}

apply plugin: 'java'

group = 'org.springframework.samples'
version = '3.0.0'
sourceCompatibility = '17'

repositories {
  mavenCentral()
  google()
}

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.2.3"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  implementation 'jakarta.xml.bind:jakarta.xml.bind-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'com.github.ben-manes.caffeine:caffeine'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'com.mysql:mysql-connector-j'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
  useJUnitPlatform()
}

task extractJar(type: Copy) {
    dependsOn tasks.assemble

    def zipFile = file("${buildDir}/libs/${rootProject.name}-${version}.jar")
    def outputDir = file("${buildDir}/extracted/")

    from zipTree(zipFile)
    into outputDir
}

task obfuscate(type: ProGuardTask) {
    dependsOn tasks.extractJar

    injars  "${buildDir}/extracted/BOOT-INF/classes"
    outjars "${buildDir}/obfuscatedClasses.jar"

    libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'

    // This will contain the Spring dependencies.
    libraryjars sourceSets.main.compileClasspath

    keepdirectories

    // Keep the main class entry point.
    keep 'public class * { \
            public static void main(java.lang.String[]); \
         }'

    keepattributes '*Annotation*'

    // This simple example requires classes with @Component annotation classes
    // to be kept, since otherwise components could end up with clashing names,
    // if they do not set the name explicitly.
    keep 'public @org.springframework.stereotype.Component class *'
    keep 'public @org.springframework.stereotype.Repository class *'
    keep 'public @org.springframework.stereotype.Service class *'
    keep 'public @org.springframework.stereotype.Controller class *'

    keep 'public @org.springframework.stereotype.Controller class *'

    keep 'public @org.springframework.data.repository.Repository class *'
    keep 'public @org.springframework.web.bind.annotation.RestController class *'

    keep 'public @jakarta.persistence.Entity class *'
    keep 'public @jakarta.persistence.MappedSuperclass class *'
    
    // You may need to keep classes or members based on other annotations such as:
    keepclassmembers 'public class * { \
            @org.springframework.context.annotation.* *; \
            @org.springframework.beans.factory.annotation.* *; \
            @org.springframework.web.bind.annotation.* *; \
            @org.springframework.transaction.annotation.* *; \
            @jakarta.transaction.* *; \
            @jakarta.persistence.* *; \
          }'
}

task deleteClasses(type: Delete) {
    delete "${buildDir}/extracted/BOOT-INF/classes/"
}

task copyObfuscatedClasses(type: Copy) {
    dependsOn tasks.deleteClasses
    dependsOn tasks.obfuscate

    from zipTree("${buildDir}/obfuscatedClasses.jar")
    into "${buildDir}/extracted/BOOT-INF/classes/"

    delete "${buildDir}/extracted/BOOT-INF/classes/classes/"
}

task deleteObfuscated(type: Delete) {
    dependsOn tasks.copyObfuscatedClasses

    delete 'build/obfuscatedClasses.jar'
}

task proguard(type: Zip) {
    dependsOn tasks.obfuscate
    dependsOn tasks.deleteClasses
    dependsOn tasks.copyObfuscatedClasses
    dependsOn tasks.deleteObfuscated

    from  "${buildDir}/extracted"
    entryCompression ZipEntryCompression.STORED
    archiveFileName= "${rootProject.name}-${archiveVersion.get()}-obfuscated.jar"
    destinationDirectory = file("${buildDir}/libs")
}
